name: Build with PyInstaller using Rye

on:
  push:
    tags:
      - "v*" # Trigger on version tags

jobs:
  build:
    name: Build on ${{ matrix.TARGET }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            TARGET: macos
            CMD_BUILD: >
              pyinstaller --noconfirm --onedir --console --icon src/icons/icon.ico --name umdapy --debug noarchive --noupx --additional-hooks-dir src/hooks --hidden-import umdalib --paths src/ src/main.py
            ZIP_IT: cd dist && zip -r9 umdapy-darwin.zip umdapy/
            OUT_FILE_NAME: umdapy-darwin.zip
            ASSET_MIME: application/zip

          - os: windows-latest
            TARGET: windows
            CMD_BUILD: pyinstaller --noconfirm --onedir --console --icon src/icons/icon.ico --name umdapy --debug noarchive --noupx --additional-hooks-dir src/hooks --hidden-import umdalib --paths src/ src/main.py
            ZIP_IT: powershell Compress-Archive -Path dist/umdapy -DestinationPath dist/umdapy-win32.zip
            OUT_FILE_NAME: umdapy-win32.zip
            ASSET_MIME: application/zip

          # - os: ubuntu-latest
          #   TARGET: ubuntu
          #   CMD_BUILD: >
          #     pyinstaller --noconfirm --onedir --console --icon src/icons/icon.ico --name umdapy --debug noarchive --noupx --additional-hooks-dir src/hooks --hidden-import umdalib --paths src/ src/main.py
          #   ZIP_IT: cd dist && zip -r umdapy-linux.zip umdapy/
          #   OUT_FILE_NAME: umdapy-linux.zip
          #   ASSET_MIME: application/zip

    steps:
      - uses: actions/checkout@v3

      - name: Install Rye
        id: setup-rye
        uses: eifinger/setup-rye@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Check if cache was restored
        if: steps.setup-rye.outputs.cache-hit == 'true'
        run: echo "Cache was restored"

      - name: Set up Python environment with Rye
        run: rye sync

      - name: Build with PyInstaller
        run: rye run ${{ matrix.CMD_BUILD }}

      - name: Zip the build
        run: ${{ matrix.ZIP_IT }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.OUT_FILE_NAME }}
          path: dist/${{ matrix.OUT_FILE_NAME }}

  create_release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store Release URL
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

      - name: Upload Release URL
        uses: actions/upload-artifact@v3
        with:
          name: release_url
          path: release_url.txt

  upload_assets:
    name: Upload Assets to Release
    needs: create_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - asset_name: umdapy-darwin.zip
            asset_mime: application/zip
          - asset_name: umdapy-win32.zip
            asset_mime: application/zip
          # - asset_name: umdapy-linux.zip
          #   asset_mime: application/zip
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.asset_name }}

      - name: Download Release URL
        uses: actions/download-artifact@v3
        with:
          name: release_url

      - name: Get Release URL
        id: get_release_url
        run: |
          value=`cat release_url.txt`
          echo "release_url=$value" >> $GITHUB_OUTPUT

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_url.outputs.release_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: ${{ matrix.asset_mime }}
